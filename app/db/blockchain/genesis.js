/*
* Orwell http://github.com/gettocat/orwell
* Platform for building decentralized applications
* MIT License
* Copyright (c) 2017 Nanocat <@orwellcat at twitter>
*/

var config = require('../../../config');
var tx = require('./tx')
var Block = require('./block')
var hash = require('../../crypto');
var dif = require('./difficulty');
var util = require('./util');

var block = null
module.exports = config.net == 'mainnet' ? get : getTestNet;

function get() {
    if (!block) {
        var t = new tx();
        t.fromCoinBase("Orwell. 26.09.2017 - first block generated by NanoCat \-(o_o)-/", "oZmpGpF9QFBhqksZWqRpnUv95k7pdiRDrc", 50 * 1e8, 0xffffffff)
        var b = new Block({
            version: 1,
            hashPrevBlock: '0000000000000000000000000000000000000000000000000000000000000000',
            time: 1506423600, //time(),
            bits: 0x1effffff,
            nonce: 13663,
            hash: '0000d0a06360b172acd5a24be85de5c62958b0553b11d812de67e52f2c1e113a',
        },
            [t]);
        b.generate();
        block = b;
    }
    return block;
}

function getTestNet() {
    if (!block) {
        var t = new tx();
        t.fromCoinBase("Orwell. 26.09.2017 - first block generated by NanoCat \-(o_o)-/ in testnet", "oUj8dYLqGjHXdWWKkNoqhCKXnLoNpVGwus", 1e6 * 1e8);
        var b = new Block({
            version: 1,
            hashPrevBlock: '0000000000000000000000000000000000000000000000000000000000000000',
            time: 1506423600, //time(),
            bits: 0x1effffff,
            nonce: 18159,
            hash: '0000e81c1c6dd960154d773cd2123a72b206b320151240f7531a16f5b42a74d2',
        },
            [t]);
        b.generate();
        block = b;
    }
    return block;
}

function create(data) {

    if (config.net != 'mainnet')
        throw new Error('cant create genesis in test net for mainnet');

    var t = new tx();
    t.fromCoinBase("Orwell. 26.09.2017 - first block generated by NanoCat \-(o_o)-/", "oZmpGpF9QFBhqksZWqRpnUv95k7pdiRDrc", 50 * 1e8);

    var block = new Block({
        version: 1,
        hashPrevBlock: '0000000000000000000000000000000000000000000000000000000000000000',
        time: 1506423600, //time(),
        bits: 0x1effffff, //log2N=245 //dif.bits(), //todo: dif/get difficulty from network
        nonce: 0,
    }, [
            t
        ]);

    block.generate();

    //console.log(block.nonce);
    var start_time = time(), hashs = 0;
    var finded = false, target = new Buffer(dif.bits2target(block.bits), 'hex'), thex = target.toString('hex');
    var h1 = "";
    while (block.nonce < 0x100000000 && !finded) {

        if (time() - start_time > 60) {
            h1 = "hashrate = " + (hashs / 60) + " h/s ";
            start_time = time();
            hashs = 0;
        } else
            hashs++;

        console.log(h1 + "nonce: " + block.nonce + ": ")
        var h = block.getHash();
        if (dif.moreThen(h, target)) {
            console.log('success!\n\n');
            console.log("hash=" + h.toString('hex') + ", target=" + thex);
            finded = 1;
        } else {
            //console.log("fail\n");
        }
        block.nonce++;
    }

}


function createTestNet(data) {

    if (config.net != 'testnet')
        throw new Error('cant create genesis in main net for testnet');

    var t = new tx();
    t.fromCoinBase("Orwell. 26.09.2017 - first block generated by NanoCat \-(o_o)-/ in testnet", "oUj8dYLqGjHXdWWKkNoqhCKXnLoNpVGwus", 1e6 * 1e8);//for test purposes

    var block = new Block({
        version: 1,
        hashPrevBlock: '0000000000000000000000000000000000000000000000000000000000000000',
        time: 1506423600, //time(),
        bits: 0x1effffff, //log2N=245 //dif.bits(), //todo: dif/get difficulty from network
        nonce: 0,
    }, [
            t
        ]);

    block.generate();

    //console.log(block.nonce);
    var start_time = time(), hashs = 0;
    var finded = false, target = new Buffer(dif.bits2target(block.bits), 'hex'), thex = target.toString('hex');
    var h1 = "";
    while (block.nonce < 0x100000000 && !finded) {

        if (time() - start_time > 60) {
            h1 = "hashrate = " + (hashs / 60) + " h/s ";
            start_time = time();
            hashs = 0;
        } else
            hashs++;

        console.log(h1 + "nonce: " + block.nonce + ": ")
        var h = block.getHash();
        if (dif.moreThen(h, target)) {
            console.log('success!\n\n');
            console.log("hash=" + h.toString('hex') + ", target=" + thex);
            finded = 1;
        } else {
            //console.log("fail\n");
        }
        block.nonce++;
    }

}